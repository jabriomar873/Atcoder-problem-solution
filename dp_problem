///// problem1 : frog 1


#include<bits/stdc++.h>
#define xyz ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);cout<<std::setiosflags(std::ios::fixed)<<std::setprecision(15);
#define dd double
#define ll long long 
#define minf -1e18
#define pinf 1e18

using namespace std;



int main() {
    xyz;
    ll n;cin>>n;
    vector<ll> h(n);
    for(ll i=0;i<n;i++) cin>>h[i];
    vector<ll> dp(n+2);
    dp[2]=abs(h[0]-h[1]);
    for(ll i=3;i<=n+1;i++)
    {
        dp[i]=min(abs(h[i-1]-h[i-2])+dp[i-1],abs(h[i-1]-h[i-3])+dp[i-2]);
    }
    cout<<dp[n];
    return 0;
}


///// problem2 :frog 2


#include<bits/stdc++.h>
#define xyz ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);cout<<std::setiosflags(std::ios::fixed)<<std::setprecision(15);
#define dd double
#define ll long long 
#define minf -1e18
#define pinf 1e18

using namespace std;



int main() {
    xyz;
    ll n,k;cin>>n>>k;
    vector<ll> h(n);
    for(ll i=0;i<n;i++) cin>>h[i];
    vector<ll> dp(n+1);
    dp[2]=abs(h[0]-h[1]);
    for(ll i=3;i<=n;i++)
    {
        ll x=abs(h[i-1]-h[i-2])+dp[i-1];
        for(ll j=1;(j<=k and i>=j+1);j++)
        {
           x=min(x,abs(h[i-1]-h[i-j-1])+dp[i-j]);
        }
        dp[i]=x;
    }
    cout<<dp[n];
    return 0;
}

/////  problem 3 : Vacation 

#include<bits/stdc++.h>
#define xyz ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);cout<<std::setiosflags(std::ios::fixed)<<std::setprecision(15);
#define dd double
#define ll long long 
#define minf -1e18
#define pinf 1e18

using namespace std;



int main() {
    xyz;
    ll n;cin>>n;
    vector<ll> v[n];
    ll a,b,c;
    for(ll i=0;i<n;i++)
    {
        cin>>a>>b>>c;
        v[i]={a,b,c};
    }
    vector<vector<ll>> dp(n+1,vector<ll>(3,0));
    dp[1][0]=v[0][0];dp[1][1]=v[0][1];dp[1][2]=v[0][2];
    for(ll i=2;i<=n;i++)
    {
        dp[i][0]=v[i-1][0]+max(dp[i-1][1],dp[i-1][2]);
        dp[i][1]=v[i-1][1]+max(dp[i-1][0],dp[i-1][2]);
        dp[i][2]=v[i-1][2]+max(dp[i-1][1],dp[i-1][0]);
    }
    ll x=max(dp[n][0],dp[n][1]);
    cout<<max(x,dp[n][2]);
    return 0;
}

///// problem 4 knapsack1 in c++

#include<bits/stdc++.h>
#define xyz ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);cout<<std::setiosflags(std::ios::fixed)<<std::setprecision(15);
#define dd double
#define ll long long 
#define minf -1e18
#define pinf 1e18

using namespace std;



int main() {
    xyz;
    ll n,w;cin>>n>>w;
    vector<pair<ll,ll>> v;
    for(ll i=0;i<n;i++)
    {
        ll we,va;cin>>we>>va;
        v.push_back({we,va});
    }
    vector<vector<ll>> dp(n+1,vector<ll>(w+1,0));
    for(ll i=1;i<=n;i++)
    {
        for(ll j=1;j<=w;j++)
        {
            if(v[i-1].first<=j)
            {
                dp[i][j]=max(dp[i-1][j],dp[i-1][j-v[i-1].first]+v[i-1].second);
            }
            else
            {
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    cout<<dp[n][w];
    return 0;
}

///// problem 4 knapsack1 in python 

import sys

def knapsack_iterative(weights, values, capacity):
    n = len(weights)
    dp = [0] * (capacity + 1)

    for i in range(n):
        for j in range(capacity, weights[i] - 1, -1):
            dp[j] = max(dp[j], dp[j - weights[i]] + values[i])

    return dp[capacity]

if __name__ == "__main__":
    
    n, w = map(int, input().split())
    weights, values = [], []
    for _ in range(n):
        we, va = map(int, input().split())
        weights.append(we)
        values.append(va)

    result = knapsack_iterative(weights, values, w)
    print(result)
